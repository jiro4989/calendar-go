---
name: nim release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  app: 'TODO'
  nim-version: '1.6.0'
  maintainer: 'jiro'
  package_desc: 'nimjson generates nim object definitions from json documents.'
  documents: LICENSE README.*

jobs:
  build-artifact:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macOS-latest
    steps:
      - uses: actions/checkout@v2
      - uses: jiro4989/setup-nim-action@v1
        with:
          nim-version: ${{ env.nim-version }}
      - run: nimble build -Y -d:release
      - name: Create artifact
        run: |
          os="${{ runner.os }}"
          assets="${{ env.app }}_$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')"
          echo "$assets"
          mkdir -p "dist/$assets"
          cp -r ${{ env.documents }} ${{ env.app }} "dist/$assets/"
          (
            cd dist
            if [[ "${{ runner.os }}" == Windows ]]; then
              7z a "$assets.zip" "$assets"
            else
              tar czf "$assets.tar.gz" "$assets"
            fi
            ls -lah *.*
          )
        shell: bash
      - uses: actions/upload-artifact@v2
        with:
          name: artifact-${{ matrix.os }}
          path: |
            dist/*.tar.gz
            dist/*.zip

  build-debian-package:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: jiro4989/setup-nim-action@v1
        with:
          nim-version: ${{ env.nim-version }}
      - run: nimble build -Y -d:release
      - name: Create package
        run: |
          mkdir -p .debpkg/usr/bin
          cp -p ./${{ env.app }} .debpkg/usr/bin/
      - uses: jiro4989/build-deb-action@v2
        with:
          package: ${{ env.app }}
          package_root: .debpkg
          maintainer: ${{ env.maintainer }}
          version: ${{ github.ref }}
          arch: 'amd64'
          desc: '${{ env.package_desc }}'
      - uses: actions/upload-artifact@v2
        with:
          name: artifact-deb
          path: |
            ./*.deb

  build-rpm-package:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: jiro4989/setup-nim-action@v1
        with:
          nim-version: ${{ env.nim-version }}
      - run: nimble build -Y -d:release
      - name: Create package
        run: |
          mkdir -p .rpmpkg/usr/bin
          cp -p ./${{ env.app }} .rpmpkg/usr/bin/
      - uses: jiro4989/build-rpm-action@v2
        with:
          summary: '${{ env.package_desc }}'
          package: ${{ env.app }}
          package_root: .rpmpkg
          maintainer: ${{ env.maintainer }}
          version: ${{ github.ref }}
          arch: 'x86_64'
          desc: '${{ env.package_desc }}'
      - uses: actions/upload-artifact@v2
        with:
          name: artifact-rpm
          path: |
            ./*.rpm
            !./*-debuginfo-*.rpm

  create-release:
    runs-on: ubuntu-latest
    needs:
      - build-artifact
      - build-debian-package
      - build-rpm-package
    steps:
      - uses: actions/checkout@v2
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Write upload_url to file
        run: echo '${{ steps.create-release.outputs.upload_url }}' > upload_url.txt

      - uses: actions/upload-artifact@v2
        with:
          name: create-release
          path: upload_url.txt

  upload-release:
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            asset_name_suffix: linux.tar.gz
            asset_content_type: application/gzip
          - os: windows-latest
            asset_name_suffix: windows.zip
            asset_content_type: application/zip
          - os: macOS-latest
            asset_name_suffix: macos.tar.gz
            asset_content_type: application/gzip
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact-${{ matrix.os }}

      - uses: actions/download-artifact@v2
        with:
          name: create-release

      - id: vars
        run: |
          echo "::set-output name=upload_url::$(cat upload_url.txt)"

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.vars.outputs.upload_url }}
          asset_path: ${{ env.app }}_${{ matrix.asset_name_suffix }}
          asset_name: ${{ env.app }}_${{ matrix.asset_name_suffix }}
          asset_content_type: ${{ matrix.asset_content_type }}

  upload-linux-packages:
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - pkg: deb
            asset_content_type: application/vnd.debian.binary-package
          - pkg: rpm
            asset_content_type: application/x-rpm
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact-${{ matrix.pkg }}

      - uses: actions/download-artifact@v2
        with:
          name: create-release

      - id: vars
        run: |
          echo "::set-output name=upload_url::$(cat upload_url.txt)"
          echo "::set-output name=asset_name::$(ls *.${{ matrix.pkg }} | head -n 1)"

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.vars.outputs.upload_url }}
          asset_path: ${{ steps.vars.outputs.asset_name }}
          asset_name: ${{ steps.vars.outputs.asset_name }}
          asset_content_type: ${{ matrix.asset_content_type }}
